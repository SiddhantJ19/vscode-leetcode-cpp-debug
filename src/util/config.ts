import * as vscode from 'vscode'

export const configs = {
    resourcesPath: "resources",
    codePath: "code",
    token: "This file is generated by extension [LeetCode C++ Debugger], you can delete it if you want.",
    timeout: 5 * 1000,
}

export enum Source {
    LeetCode = "leetcode",
    LeetCodeCN = "leetcode-cn",
    Local = "local"
}

const sources = [
    Source.LeetCode,
    Source.LeetCodeCN,
    Source.Local
]

const hosts = {
    "leetcode" : "https://leetcode.com/",
    "leetcode-cn" : "https://leetcode-cn.com/"
}

export interface Language {
    name: string;
    disp: string;
    ext: string;
    commet: {
        begin: string;
        end: string
    };
    stub: string; //glob expression
}

const languages: Language[] = [
    {
        name: "cpp",
        disp: "C++",
        ext: "cpp",
        commet: { begin: "/*", end: "*/" },
        stub: "**"
    }
]

function getConfiguration(): vscode.WorkspaceConfiguration {
    return vscode.workspace.getConfiguration("leetcode-cpp-debugger");
}

export function getSource(): Source | undefined {
    const source: string | undefined = getConfiguration().get<string>("source");
    if(!source) {
        return;
    }
    const reg: RegExp = /\[(?:online|offline)\](?:(.+)\.com|(.+))/;
    const match: RegExpExecArray | null = reg.exec(source);
    if (!match) {
        return;
    }
    const key = match[1] ? match[1] : match[2];
    for (const str of sources) {
        if (str == key) {
            return str;
        }
    }
}

export function getProblemId(file: string): string | undefined {
    const pattern: string | undefined = getConfiguration().get<string>("idMatchPattern");
    if (!pattern) {
        return;
    }
    const reg: RegExp = new RegExp(pattern);
    const match: RegExpExecArray | null = reg.exec(file);
    if (!match || match.length <= 1) {
        return;
    }
    return match[1];
}

export function getHost(): string | undefined {
    const source: Source | undefined = getSource();
    if (!source || source == Source.Local) {
        return;
    }
    return hosts[source];
}

export function getEncoding(): string | undefined {
    return getConfiguration().get<string>("outputFileEncoding");
}

class LanguageHelper {
    public getByName(name: string) : Language | undefined {
        return languages.find(language => language.name == name);
    }
    public getByPath(path: string) : Language | undefined {
        const parts = path.split(".");
        return languages.find(language => language.ext == parts[parts.length-1]);
    }
}

export const languageHelper : LanguageHelper = new LanguageHelper();

